#lang racket
#|
___________TESTS___________


(display "---TEST Q1---\n")
  (let ([l'()] [l1 '(a b c)] [l2 '(x y z)] [l3 '(ggs ppl 111)] 
               [l12 '(a b c x y z)] 
               [l23 '(x y z ggs ppl 111)])
  (if (equal? l (my_append l l))
      (display "Q1.1 test 1 pass\n")
      (display "Q1.1 test 1 FAILED\n"))
  (sleep 0.5)
  (if (equal? l1 (my_append l l1))
      (display "Q1.1 test 2 pass\n")
      (display "Q1.1 test 2 FAILED\n"))
   (sleep 0.5)  
  (if (equal? l1 (my_append l1 l))
      (display "Q1.1 test 3 pass\n")
      (display "Q1.1 test 3 FAILED\n"))
  (sleep 0.5) 
  (if (equal? l12 (my_append l1 l2))
      (display "Q1.1 test 4 pass\n")
      (display "Q1.1 test 4 FAILED\n"))
   (sleep 0.5)  
  (if (equal? l23 (my_append l2 l3))
      (display "Q1.1 test 5 pass\n")
      (display "Q1.1 test 5 FAILED\n"))
; --------------------------------------------------------------------------------    
  (if (equal? l (my_append_fr l l))
      (display "Q1.2 test 1 pass\n")
      (display "Q1.2 test 1 FAILED\n"))
  (sleep 0.5)
  (if (equal? l1 (my_append_fr l l1))
      (display "Q1.2 test 2 pass\n")
      (display "Q1.2 test 2 FAILED\n"))
  (sleep 0.5)  
  (if (equal? l1 (my_append_fr l1 l))
      (display "Q1.2 test 3 pass\n")
      (display "Q1.2 test 3 FAILED\n"))
   (sleep 0.5)   
  (if (equal? l12 (my_append_fr l1 l2))
      (display "Q1.2 test 4 pass\n")
      (display "Q1.2 test 4 FAILED\n"))
   (sleep 0.5)   
  (if (equal? l23 (my_append_fr l2 l3))
      (display "Q1.2 test 5 pass\n")
      (display "Q1.2 test 5 FAILED\n"))
    (sleep 0.5)
    )
  
(display "\n---END OF TEST Q1---\n\n")
(sleep 0.5)
;--------------------------------------------------------------------------------

(display "---TEST Q2---\n")
  (let ([l'()] [l1 '(1 2 3 4 5 6)] [l2 '(543 234 121)] [l3 '(3 7.8 190)]
               [l1c '(2 4 6)] [l3c '(190)])
    
  (if (equal? l (filterl even? l))
      (display "Q2 test 1 pass\n")
      (display "Q2 test 1 FAILED\n"))
    (sleep 0.5)
  (if (equal? l1c (filterl even? l1))
      (display "Q2 test 2 pass\n")
      (display "Q2 test 2 FAILED\n"))
   (sleep 0.5)
  (if (equal? l3c (filterl even? l3c))
      (display "Q2 test 3 pass\n")
      (display "Q2 test 3 FAILED\n"))
   (sleep 0.5)
  (if (equal? '(234) (filterl even? l2))
      (display "Q2 test 4 pass\n")
      (display "Q2 test 4 FAILED\n"))
  (sleep 0.5)
    )


(display "\n---END OF TEST Q2---\n\n")


;--------------------------------------------------------------------------------

(display "---TEST Q3---\n")
  (let ([l'()] [l1 '(a b c d)] [l2 '(x b d w)] [l3 '()]
               [l1c '()] [l3c '()])
    
    (display (set-dif l l))
    (display "\n")
    
  (if (equal? l (set-dif l l))
      (display "Q3 test 1 pass\n")
      (display "Q3 test 1 FAILED\n"))
  (sleep 0.5)
  (if (equal? l1 (set-dif l l1))
      (display "Q3 test 2 pass\n")
      (display "Q3 test 2 FAILED\n"))
   (sleep 0.5) 
#|  (if (equal? l3c (filterl even? l3c))
      (display "Q3 test 3 pass\n")
      (display "Q3 test 3 FAILED\n"))
   (sleep 0.5)
  (if (equal? '(234) (filterl even? l2))
      (display "Q3 test 4 pass\n")
      (display "Q3 test 4 FAILED\n"))  |#
    )

(display "\n---END OF TEST Q3---\n\n")


                

|#